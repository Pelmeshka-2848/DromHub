using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Threading.Tasks;
using System.Runtime.InteropServices.WindowsRuntime;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MailKit;
using MailKit.Net.Imap;
using MailKit.Security;
using Microsoft.Extensions.Logging;
using Microsoft.UI.Dispatching;
using Microsoft.UI.Xaml;
using MimeKit;
using MailKit.Search;
using OfficeOpenXml;
using Windows.Storage;
using Windows.Storage.Pickers;
using WinRT.Interop;

namespace DromHub.ViewModels
{
    /// <summary>
    /// –ö–ª–∞—Å—Å MailParserViewModel –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MailParserViewModel.
    /// </summary>
    public partial class MailParserViewModel : ObservableObject
    {
        private readonly ILogger<MailParserViewModel> _logger;
        private readonly DispatcherQueue _dispatcherQueue = DispatcherQueue.GetForCurrentThread();
        private readonly UserSettings _userSettings;
        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä MailParserViewModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞.
        /// </summary>

        public MailParserViewModel(ILogger<MailParserViewModel> logger)
        {
            _logger = logger;

            _userSettings = UserSettings.Load(_logger);
            _pricesRoot = ResolvePricesRoot(_userSettings);

            if (!string.Equals(_userSettings.PricesDirectory, _pricesRoot, StringComparison.OrdinalIgnoreCase))
            {
                _userSettings.PricesDirectory = _pricesRoot;
                _userSettings.TrySave(_logger);
            }

            EnsurePricesRoot(logOnSuccess: true);

            // –∑–∞–≥—Ä—É–∑–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            if (SecureCreds.TryLoad(out var savedEmail, out var savedPassword, out var savedServer))
            {
                EmailAddress = savedEmail ?? "";
                Password = savedPassword ?? "";
                RememberCredentials = true;
                AddLog("üîë –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                SelectedMailServer = savedServer;
                SelectedMailServerIndex = (int)savedServer;
            }

            UpdateServerSelection(SelectedMailServer);
        }

        // ===== ENUM / SERVER CONFIG =====
        /// <summary>
        /// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ MailServerType –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MailServerType.
        /// </summary>
        public enum MailServerType { Gmail, MailRu, Yandex, Custom }

        private readonly Dictionary<MailServerType, (string Server, int Port, SecureSocketOptions Ssl)> _servers = new()
        {
            { MailServerType.Gmail, ("imap.gmail.com", 993, SecureSocketOptions.SslOnConnect) },
            { MailServerType.MailRu, ("imap.mail.ru", 993, SecureSocketOptions.SslOnConnect) },
            { MailServerType.Yandex, ("imap.yandex.ru", 993, SecureSocketOptions.SslOnConnect) },
            { MailServerType.Custom, ("imap.example.com", 993, SecureSocketOptions.Auto) }
        };
        /// <summary>
        /// –ú–µ—Ç–æ–¥ GetServerLabel –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private string GetServerLabel(MailServerType server)
        {
            return server switch
            {
                MailServerType.Gmail => "Gmail",
                MailServerType.MailRu => "Mail.ru",
                MailServerType.Yandex => "Yandex",
                MailServerType.Custom => string.IsNullOrWhiteSpace(CustomServer)
                    ? "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä"
                    : CustomServer,
                _ => server.ToString()
            };
        }

        // ===== PROPERTIES =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ UpdatePassword –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        [ObservableProperty] private MailServerType selectedMailServer = MailServerType.MailRu; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Mail.ru
        [ObservableProperty] private string emailAddress = "";
        [ObservableProperty] private string password = "";

        public void UpdatePassword(string? password)
        {
            Password = password ?? string.Empty;
        }

        [ObservableProperty] private string customServer = "imap.example.com";
        [ObservableProperty] private int customPort = 993;

        [ObservableProperty] private string statusMessage = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ";
        [ObservableProperty] private bool isLoading;
        [ObservableProperty] private bool isConnected;
        [ObservableProperty] private Visibility customServerVisibility = Visibility.Collapsed;
        [ObservableProperty] private ObservableCollection<string> logEntries = new();

        // ¬´–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è¬ª (–ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –ë–î)
        [ObservableProperty] private bool rememberCredentials = true;

        // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        /// <summary>
        /// –°–≤–æ–π—Å—Ç–≤–æ MailServerTypes –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º MailServerTypes.
        /// </summary>
        [ObservableProperty] private double parsingProgress;          // 0..100
        [ObservableProperty] private string progressDetails = "";     // —Ç–µ–∫—Å—Ç –ø–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        [ObservableProperty] private string currentSupplier = "";     // –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        [ObservableProperty] private int processedSuppliers;          // —Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
        [ObservableProperty] private int totalSuppliers;              // –≤—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
        /// <summary>
        /// –°–≤–æ–π—Å—Ç–≤–æ MailServerTypes –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º MailServerTypes.
        /// </summary>

        public IReadOnlyList<string> MailServerTypes { get; } = new[]
        {
            "Gmail (imap.gmail.com:993)",
            "Mail.ru (imap.mail.ru:993)",
            "Yandex (imap.yandex.ru:993)",
            "–î—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"
        };

        // –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ ‚Üí –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ –ø–æ From
        private readonly List<(string SupplierName, string FromEmail)> _suppliers = new()
        {
            ("AllMyParts", "eugenestulev@gmail.com"),
            ("Rossko",     "price@rossko.ru"),
            ("MXGroup",    "no_reply@mxgroup.ru"),
            ("Uniqom",     "1c_info@uniqom.ru"),
            ("Berg",       "noreply@berg.ru"),
            ("AvtoMC",     "noreply@api.avto-ms.ru"),
        };

        // –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è—é enum –Ω–∞ –±—É–¥—É—â–µ–µ, —Å–µ–π—á–∞—Å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        /// <summary>
        /// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ MailParseStage –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MailParseStage.
        /// </summary>
        private enum MailParseStage
        {
            Search,
            Fetch,
            Prepare,
            Zip,
            Xlsx,
            Csv,
            Cleanup,
            Done
        }

        // ===== LOGGING =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ AddLog –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private void AddLog(string message)
        {
            _dispatcherQueue.TryEnqueue(() =>
            {
                LogEntries.Add($"{DateTime.Now:HH:mm:ss} ‚Äî {message}");
            });
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ UpdateStatus –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private void UpdateStatus(string message)
        {
            _dispatcherQueue.TryEnqueue(() => StatusMessage = message);
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ReportError –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private void ReportError(string message, Exception? ex = null)
        {
            if (ex != null)
                _logger.LogError(ex, "{Message}", message);
            else
                _logger.LogError("{Message}", message);

            AddLog($"‚ùå {message}");
            UpdateStatus(message);
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ UpdateServerSelection –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private void UpdateServerSelection(MailServerType server)
        {
            CustomServerVisibility = server == MailServerType.Custom ? Visibility.Visible : Visibility.Collapsed;
        }

        partial void OnSelectedMailServerChanged(MailServerType value)
        {
            UpdateServerSelection(value);
        }

        // –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–¥–∏—è–º–∏
        /// <summary>
        /// –ú–µ—Ç–æ–¥ SetProgress –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private void SetProgress(double value, MailParseStage stage, string? supplier = null, string? details = null)
        {
            details ??= stage switch
            {
                MailParseStage.Search => "–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞‚Ä¶",
                MailParseStage.Fetch => "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞‚Ä¶",
                MailParseStage.Prepare => "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Ä¶",
                MailParseStage.Zip => "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤‚Ä¶",
                MailParseStage.Xlsx => "–û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX‚Ä¶",
                MailParseStage.Csv => "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è CSV‚ÜíXLSX‚Ä¶",
                MailParseStage.Cleanup => "–û—á–∏—Å—Ç–∫–∞‚Ä¶",
                MailParseStage.Done => "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                _ => ProgressDetails
            };
            SetProgress(value, supplier, details);
        }

        // –±–∞–∑–æ–≤–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å/–ø–æ–¥–ø–∏—Å—å/—Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        /// <summary>
        /// –ú–µ—Ç–æ–¥ SetProgress –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private void SetProgress(double value, string? supplier = null, string? details = null)
        {
            _dispatcherQueue.TryEnqueue(() =>
            {
                ParsingProgress = Math.Clamp(value, 0, 100);
                if (!string.IsNullOrWhiteSpace(supplier)) CurrentSupplier = supplier!;
                if (details != null) ProgressDetails = details;
            });
        }

        // ===== CONNECT + DOWNLOAD =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ConnectAndDownloadAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        [RelayCommand]
        private async Task ConnectAndDownloadAsync()
        {
            if (string.IsNullOrWhiteSpace(EmailAddress) || string.IsNullOrWhiteSpace(Password))
            {
                StatusMessage = "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å";
                return;
            }

            // –ø—Ä–æ–≥—Ä–µ—Å—Å: –Ω–∞—á–∞–ª–æ
            ParsingProgress = 0;
            SetProgress(0, details: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É‚Ä¶");
            CurrentSupplier = "‚Äî";

            IsLoading = true;
            AddLog($"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {SelectedMailServer}‚Ä¶");

            if (!EnsurePricesRoot())
            {
                IsLoading = false;
                SetProgress(0, details: "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤");
                return;
            }

            var (server, port, ssl) = GetServer();

            using var client = CreateImapClient();
            try
            {
                await ConnectAsync(client, server, port, ssl);
                await AuthenticateAsync(client, EmailAddress, Password);

                IsConnected = true;
                AddLog("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
                StatusMessage = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ";

                // –°–æ—Ö—Ä–∞–Ω–∏–º/—É–¥–∞–ª–∏–º –∫—Ä–µ–¥—ã –ø–æ —Ñ–ª–∞–∂–∫—É
                if (RememberCredentials)
                {
                    SecureCreds.Save(EmailAddress, Password, SelectedMailServer);
                    AddLog("üîê –£—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ");
                }
                else
                {
                    SecureCreds.Clear();
                    AddLog("üóëÔ∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
                }

                // —á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º
                await ProcessInboxAsync(client);

                SetProgress(100, details: "–ì–æ—Ç–æ–≤–æ");
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                StatusMessage = $"–û—à–∏–±–∫–∞: {ex.Message}";
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
            }
            finally
            {
                if (client.IsConnected)
                    await DisconnectAsync(client);

                IsConnected = false;
                IsLoading = false;
                AddLog("üì® –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ CreateImapClient –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        protected virtual ImapClient CreateImapClient() => new ImapClient();
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ConnectAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        protected virtual Task ConnectAsync(ImapClient client, string server, int port, SecureSocketOptions options)
        {
            return client.ConnectAsync(server, port, options);
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ AuthenticateAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        protected virtual Task AuthenticateAsync(ImapClient client, string email, string password)
        {
            return client.AuthenticateAsync(email, password);
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ DisconnectAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        protected virtual Task DisconnectAsync(ImapClient client)
        {
            return client.DisconnectAsync(true);
        }

        private (string, int, SecureSocketOptions) GetServer()
        {
            if (SelectedMailServer == MailServerType.Custom)
                return (CustomServer, CustomPort, SecureSocketOptions.Auto);
            return _servers[SelectedMailServer];
        }

        // ===== MAIN MAIL PROCESSOR =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ProcessInboxAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        protected virtual async Task ProcessInboxAsync(ImapClient client)
        {
            var inbox = client.Inbox;
            await inbox.OpenAsync(FolderAccess.ReadOnly);

            var any = await inbox.SearchAsync(SearchQuery.All);
            if (any.Count == 0)
            {
                AddLog("üì≠ –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                StatusMessage = "–ù–µ—Ç –ø–∏—Å–µ–º";
                SetProgress(0, details: "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø—É—Å—Ç");
                return;
            }

            // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∫–∞–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            TotalSuppliers = _suppliers.Count;
            ProcessedSuppliers = 0;
            SetProgress(0, details: "–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É‚Ä¶");
            await Task.Yield();

            for (int i = 0; i < _suppliers.Count; i++)
            {
                var (supplierName, fromEmail) = _suppliers[i];

                // —É—á–∞—Å—Ç–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –æ—Ç–≤–µ–¥—ë–Ω–Ω—ã–π —ç—Ç–æ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
                double span = 100.0 / Math.Max(1, TotalSuppliers);
                double baseStart = i * span;
                double baseEnd = (i + 1) * span;

                try
                {
                    SetProgress(baseStart + span * 0.05, supplierName, $"–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç {fromEmail}‚Ä¶");
                    var uids = await inbox.SearchAsync(SearchQuery.FromContains(fromEmail));

                    if (uids == null || uids.Count == 0)
                    {
                        AddLog($"‚Äî –ü–∏—Å–µ–º –æ—Ç {supplierName} ({fromEmail}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                        SetProgress(baseEnd, supplierName, "–ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                        ProcessedSuppliers++;
                        continue;
                    }

                    var lastUid = uids[uids.Count - 1];
                    SetProgress(baseStart + span * 0.15, supplierName, "–ü–æ–ª—É—á–∞—é –ø–∏—Å—å–º–æ‚Ä¶");
                    var msg = await inbox.GetMessageAsync(lastUid);

                    var date = msg.Date.LocalDateTime;
                    var dateDir = Path.Combine(PricesRoot, date.ToString("dd-MM-yyyy"));
                    if (!TryEnsureDirectory(dateDir, $"–¥–ª—è –¥–∞—Ç—ã {date:dd-MM-yyyy} ({supplierName})"))
                    {
                        SetProgress(baseEnd, supplierName, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ");
                        ProcessedSuppliers++;
                        await Task.Yield();
                        continue;
                    }

                    AddLog($"‚úâÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ –æ—Ç {supplierName} ({fromEmail}) ‚Üí {date:dd-MM-yyyy}");

                    // –†–∞–∑–±–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
                    var parts = msg.Attachments.OfType<MimePart>().ToList();
                    var zips = parts.Where(p => Path.GetExtension(p.FileName ?? "").Equals(".zip", StringComparison.OrdinalIgnoreCase)).ToList();
                    var xlsxs = parts.Where(p => Path.GetExtension(p.FileName ?? "").Equals(".xlsx", StringComparison.OrdinalIgnoreCase)).ToList();
                    var csvs = parts.Where(p => Path.GetExtension(p.FileName ?? "").Equals(".csv", StringComparison.OrdinalIgnoreCase)).ToList();

                    int totalJobs = zips.Count + xlsxs.Count + csvs.Count;
                    int doneJobs = 0;

                    // —á—É—Ç—å —Å–¥–≤–∏–≥–∞–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –µ—â—ë –¥–æ –≤–ª–æ–∂–µ–Ω–∏–π
                    SetProgress(baseStart + span * 0.20, supplierName, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–ª–æ–∂–µ–Ω–∏–π‚Ä¶");
                    await Task.Yield();

                    // ZIP (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ .xlsx –∏ .csv –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞)
                    foreach (var part in zips)
                    {
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"–ê—Ä—Ö–∏–≤: {part.FileName}");
                        await ExtractZipAsync(part, dateDir, supplierName, date);

                        doneJobs++;
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"–ì–æ—Ç–æ–≤–æ: {part.FileName}");
                        await Task.Yield();
                    }

                    // XLSX
                    foreach (var part in xlsxs)
                    {
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {part.FileName}");
                        await SaveXlsxAsync(part, dateDir, supplierName, date);

                        doneJobs++;
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"–ì–æ—Ç–æ–≤–æ: {part.FileName}");
                        await Task.Yield();
                    }

                    // CSV ‚Üí XLSX ‚Üí –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                    foreach (var part in csvs)
                    {
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"CSV‚ÜíXLSX: {part.FileName}");
                        var xlsxPath = await ConvertCsvMimeToXlsxAsync(part, dateDir);
                        await RenameFileAsync(xlsxPath, dateDir, supplierName, date);

                        doneJobs++;
                        SetProgress(baseStart + span * (0.20 + 0.60 * (double)doneJobs / Math.Max(1, totalJobs)),
                                    supplierName, $"–ì–æ—Ç–æ–≤–æ: {part.FileName}");
                        await Task.Yield();
                    }

                    // –æ—á–∏—Å—Ç–∫–∞
                    SetProgress(baseStart + span * 0.90, supplierName, "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤‚Ä¶");
                    Cleanup(dateDir);

                    // —Ñ–∏–Ω–∞–ª –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
                    SetProgress(baseEnd, supplierName, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ");
                    ProcessedSuppliers++;
                    await Task.Yield();
                }
                catch (Exception ex)
                {
                    AddLog($"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {supplierName}: {ex.Message}");
                    SetProgress(baseEnd, supplierName, "–û—à–∏–±–∫–∞");
                    ProcessedSuppliers++;
                }
            }

            // –æ–±—â–∏–π —Ñ–∏–Ω–∞–ª
            SetProgress(100, details: "–ì–æ—Ç–æ–≤–æ");
            AddLog($"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {ProcessedSuppliers}/{TotalSuppliers}");
            StatusMessage = $"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {ProcessedSuppliers}";
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ SafeName –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private static string SafeName(string name)
        {
            foreach (var c in Path.GetInvalidFileNameChars())
                name = name.Replace(c, '_');
            return name.Trim();
        }

        // ===== ZIP: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º .xlsx –∏ .csv –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ExtractZipAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private async Task ExtractZipAsync(MimePart zip, string dir, string supplier, DateTime date)
        {
            try
            {
                var temp = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".zip");
                using (var fs = File.Create(temp))
                    await zip.Content.DecodeToAsync(fs);

                using (var archive = ZipFile.OpenRead(temp))
                {
                    foreach (var entry in archive.Entries)
                    {
                        if (string.IsNullOrWhiteSpace(entry.Name)) continue;

                        var extractedPath = Path.Combine(dir, entry.Name);
                        entry.ExtractToFile(extractedPath, true);

                        var ext = Path.GetExtension(entry.Name);
                        if (ext.Equals(".xlsx", StringComparison.OrdinalIgnoreCase))
                        {
                            await RenameFileAsync(extractedPath, dir, supplier, date);
                        }
                        else if (ext.Equals(".csv", StringComparison.OrdinalIgnoreCase))
                        {
                            // CSV –≤–Ω—É—Ç—Ä–∏ –∞—Ä—Ö–∏–≤–∞ ‚Üí –¥–µ–ª–∞–µ–º XLSX –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, CSV –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—Å—è –≤ Cleanup
                            var xlsxPath = await ConvertCsvFileToXlsxAsync(extractedPath, dir);
                            await RenameFileAsync(xlsxPath, dir, supplier, date);
                        }
                    }
                }
                File.Delete(temp);
                AddLog($"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω –∞—Ä—Ö–∏–≤ {zip.FileName}");
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ {zip.FileName}: {ex.Message}");
            }
        }

        // ===== CSV helpers (–æ–±—â–∏–µ –¥–ª—è MIME –∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ ZIP) =====
        /// <summary>
        /// –ú–µ—Ç–æ–¥ DetectDelimiter –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private static char DetectDelimiter(string line)
        {
            if (string.IsNullOrEmpty(line)) return ';';
            int sc = line.Count(c => c == ';');
            int cc = line.Count(c => c == ',');
            return sc >= cc ? ';' : ',';
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ParseCsvLine –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private static List<string> ParseCsvLine(string line, char delim)
        {
            var res = new List<string>();
            if (line == null) { res.Add(string.Empty); return res; }

            bool inQuotes = false;
            var cur = new System.Text.StringBuilder();

            for (int i = 0; i < line.Length; i++)
            {
                char c = line[i];

                if (c == '"')
                {
                    if (inQuotes && i + 1 < line.Length && line[i + 1] == '"')
                    {
                        // —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
                        cur.Append('"');
                        i++;
                    }
                    else
                    {
                        inQuotes = !inQuotes;
                    }
                }
                else if (c == delim && !inQuotes)
                {
                    res.Add(cur.ToString());
                    cur.Clear();
                }
                else
                {
                    cur.Append(c);
                }
            }
            res.Add(cur.ToString());
            return res;
        }

        // CSV –ø—Ä–∏—à—ë–ª –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏–µ (MimePart)
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ConvertCsvMimeToXlsxAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private async Task<string> ConvertCsvMimeToXlsxAsync(MimePart csvPart, string targetDir)
        {
            var tempCsv = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid():N}.csv");
            try
            {
                using (var fs = File.Create(tempCsv))
                    await csvPart.Content.DecodeToAsync(fs);

                return await ConvertCsvFileToXlsxAsync(tempCsv, targetDir);
            }
            finally
            {
                try { if (File.Exists(tempCsv)) File.Delete(tempCsv); } catch { /* ignore */ }
            }
        }

        // CSV —É–∂–µ –ª–µ–∂–∏—Ç –Ω–∞ –¥–∏—Å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ ZIP)
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ConvertCsvFileToXlsxAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>
        private async Task<string> ConvertCsvFileToXlsxAsync(string csvPath, string targetDir)
        {
            try
            {
                var lines = await File.ReadAllLinesAsync(csvPath);
                var delimiter = lines.Length > 0 ? DetectDelimiter(lines[0]) : ';';

                var xlsxTempPath = Path.Combine(targetDir, $"csv_{Guid.NewGuid():N}.xlsx");
                using (var package = new OfficeOpenXml.ExcelPackage())
                {
                    var ws = package.Workbook.Worksheets.Add("Sheet1");

                    for (int r = 0; r < lines.Length; r++)
                    {
                        var cells = ParseCsvLine(lines[r], delimiter);
                        for (int c = 0; c < cells.Count; c++)
                            ws.Cells[r + 1, c + 1].Value = cells[c];
                    }

                    package.SaveAs(new FileInfo(xlsxTempPath));
                }

                return xlsxTempPath;
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ CSV‚ÜíXLSX ({Path.GetFileName(csvPath)}): {ex.Message}");
                throw;
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ SaveXlsxAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private async Task SaveXlsxAsync(MimePart xlsx, string dir, string supplier, DateTime date)
        {
            try
            {
                var tempName = $"{SafeName(supplier)}_{date:ddMMyyyy}_{Guid.NewGuid():N}.xlsx";
                var path = Path.Combine(dir, tempName);
                using (var fs = File.Create(path))
                    await xlsx.Content.DecodeToAsync(fs);

                await RenameFileAsync(path, dir, supplier, date);
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {xlsx.FileName}: {ex.Message}");
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ RenameFileAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private async Task RenameFileAsync(string path, string dir, string supplier, DateTime date)
        {
            try
            {
                var baseName = $"{SafeName(supplier)}_{date:ddMMyyyy}";
                var target = Path.Combine(dir, baseName + ".xlsx");
                int counter = 1;

                while (File.Exists(target))
                {
                    target = Path.Combine(dir, $"{baseName}_{counter}.xlsx");
                    counter++;
                }

                File.Move(path, target, true);
                AddLog($"‚úÖ {Path.GetFileName(path)} ‚Üí {Path.GetFileName(target)}");
                await Task.Delay(20);
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ Cleanup –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private void Cleanup(string dir)
        {
            int deleted = 0;
            foreach (var file in Directory.GetFiles(dir))
            {
                if (!file.EndsWith(".xlsx", StringComparison.OrdinalIgnoreCase))
                {
                    try { File.Delete(file); deleted++; }
                    catch { /* ignore */ }
                }
            }
            if (deleted > 0) AddLog($"üßπ –£–¥–∞–ª–µ–Ω–æ –Ω–µ-xlsx —Ñ–∞–π–ª–æ–≤: {deleted}");
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ProcessZipFileAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private async Task<int> ProcessZipFileAsync(string zipPath, string defaultBaseName)
        {
            int added = 0;
            try
            {
                using var archive = ZipFile.OpenRead(zipPath);
                foreach (var entry in archive.Entries)
                {
                    if (string.IsNullOrEmpty(entry.Name))
                        continue;

                    var entryExt = (Path.GetExtension(entry.Name) ?? string.Empty).ToLowerInvariant();
                    var entryBase = SafeName(Path.GetFileNameWithoutExtension(entry.Name));
                    if (string.IsNullOrWhiteSpace(entryBase))
                        entryBase = defaultBaseName;

                    if (entryExt == ".xlsx")
                    {
                        var destPath = EnsureUniquePath(Path.Combine(PricesRoot, $"{entryBase}.xlsx"));
                        entry.ExtractToFile(destPath, true);
                        AddLog($"‚úÖ ZIP {Path.GetFileName(zipPath)} ‚Üí {Path.GetFileName(destPath)}");
                        added++;
                    }
                    else if (entryExt == ".csv")
                    {
                        var tempCsv = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid():N}.csv");
                        entry.ExtractToFile(tempCsv, true);
                        try
                        {
                            var xlsxTemp = await ConvertCsvFileToXlsxAsync(tempCsv, PricesRoot);
                            var destPath = EnsureUniquePath(Path.Combine(PricesRoot, $"{entryBase}.xlsx"));
                            File.Move(xlsxTemp, destPath, true);
                            AddLog($"‚úÖ ZIP CSV {entry.Name} ‚Üí {Path.GetFileName(destPath)}");
                            added++;
                        }
                        finally
                        {
                            TryDeleteFile(tempCsv);
                        }
                    }
                    else
                    {
                        AddLog($"‚ÑπÔ∏è –§–∞–π–ª {entry.Name} –≤ –∞—Ä—Ö–∏–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç)");
                    }
                }
            }
            catch (Exception ex)
            {
                ReportError($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—Ä—Ö–∏–≤ {Path.GetFileName(zipPath)}: {ex.Message}", ex);
            }

            return added;
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ CopyStorageFileToTempAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private static async Task<string> CopyStorageFileToTempAsync(StorageFile file, string extension)
        {
            var tempPath = Path.Combine(Path.GetTempPath(), $"{Guid.NewGuid():N}{extension}");
            await using (var source = await file.OpenStreamForReadAsync())
            await using (var destination = File.Create(tempPath))
            {
                await source.CopyToAsync(destination);
            }

            return tempPath;
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ EnsureUniquePath –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private static string EnsureUniquePath(string path)
        {
            var directory = Path.GetDirectoryName(path) ?? Directory.GetCurrentDirectory();
            var name = Path.GetFileNameWithoutExtension(path);
            var extension = Path.GetExtension(path);
            var candidate = path;
            var counter = 1;

            while (File.Exists(candidate))
            {
                candidate = Path.Combine(directory, $"{name}_{counter}{extension}");
                counter++;
            }

            return candidate;
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ TryDeleteFile –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        private static void TryDeleteFile(string path)
        {
            try
            {
                if (File.Exists(path))
                    File.Delete(path);
            }
            catch
            {
                // ignored
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ClearCredentials –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        [RelayCommand]
        private void ClearCredentials()
        {
            EmailAddress = "";
            Password = "";
            StatusMessage = "–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã";
            AddLog("üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (–ø–æ–ª—è –≤–≤–æ–¥–∞)");
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ForgetSavedCredentials –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        [RelayCommand]
        private void ForgetSavedCredentials()
        {
            SecureCreds.Clear();
            AddLog("üóëÔ∏è –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã");
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ ManualAddPricesAsync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        [RelayCommand]
        private async Task ManualAddPricesAsync()
        {
            if (!EnsurePricesRoot())
                return;

            try
            {
                var picker = new FileOpenPicker
                {
                    ViewMode = PickerViewMode.List,
                    SuggestedStartLocation = PickerLocationId.Downloads
                };
                picker.FileTypeFilter.Add(".xlsx");
                picker.FileTypeFilter.Add(".csv");
                picker.FileTypeFilter.Add(".zip");

                var hwnd = App.MainHwnd;
                if (hwnd == 0 && App.MainWindow is not null)
                {
                    hwnd = WindowNative.GetWindowHandle(App.MainWindow);
                }

                if (hwnd != 0)
                {
                    InitializeWithWindow.Initialize(picker, hwnd);
                }

                var files = await picker.PickMultipleFilesAsync();
                if (files == null || files.Count == 0)
                {
                    UpdateStatus("–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã");
                    AddLog("‚ÑπÔ∏è –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚Äî —Ñ–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã");
                    return;
                }

                StorageFolder targetFolder;
                try
                {
                    targetFolder = await StorageFolder.GetFolderFromPathAsync(PricesRoot);
                }
                catch (Exception ex)
                {
                    ReportError($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤: {ex.Message}", ex);
                    return;
                }

                UpdateStatus("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤‚Ä¶");
                AddLog($"üì• –ù–∞—á–∞—Ç–æ —Ä—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ ({files.Count} —à—Ç.)");

                int successCount = 0;

                foreach (var file in files)
                {
                    try
                    {
                        var extension = (Path.GetExtension(file.Name) ?? string.Empty).ToLowerInvariant();
                        var safeBase = SafeName(Path.GetFileNameWithoutExtension(file.Name));
                        if (string.IsNullOrWhiteSpace(safeBase))
                        {
                            safeBase = $"Manual_{DateTime.Now:ddMMyyyy_HHmmss}";
                        }

                        if (extension == ".xlsx")
                        {
                            var copied = await file.CopyAsync(targetFolder, $"{safeBase}.xlsx", NameCollisionOption.GenerateUniqueName);
                            AddLog($"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–π—Å {copied.Name}");
                            successCount++;
                        }
                        else if (extension == ".csv")
                        {
                            var tempCsv = await CopyStorageFileToTempAsync(file, ".csv");
                            try
                            {
                                var xlsxTemp = await ConvertCsvFileToXlsxAsync(tempCsv, PricesRoot);
                                var destPath = EnsureUniquePath(Path.Combine(PricesRoot, $"{safeBase}.xlsx"));
                                File.Move(xlsxTemp, destPath, true);
                                AddLog($"‚úÖ CSV {file.Name} ‚Üí {Path.GetFileName(destPath)}");
                                successCount++;
                            }
                            finally
                            {
                                TryDeleteFile(tempCsv);
                            }
                        }
                        else if (extension == ".zip")
                        {
                            var tempZip = await CopyStorageFileToTempAsync(file, ".zip");
                            try
                            {
                                var addedFromZip = await ProcessZipFileAsync(tempZip, safeBase);
                                successCount += addedFromZip;
                                if (addedFromZip == 0)
                                {
                                    AddLog($"‚ÑπÔ∏è –ê—Ä—Ö–∏–≤ {file.Name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤");
                                }
                            }
                            finally
                            {
                                TryDeleteFile(tempZip);
                            }
                        }
                        else
                        {
                            AddLog($"‚ÑπÔ∏è –§–∞–π–ª {file.Name} –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)");
                        }
                    }
                    catch (Exception ex)
                    {
                        ReportError($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª {file.Name}: {ex.Message}", ex);
                    }
                }

                if (successCount > 0)
                {
                    Cleanup(PricesRoot);
                    UpdateStatus($"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {successCount}");
                    AddLog($"üì¶ –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {successCount}");
                }
                else
                {
                    UpdateStatus("–§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                }
            }
            catch (Exception ex)
            {
                ReportError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å–æ–≤: {ex.Message}", ex);
            }
        }
        /// <summary>
        /// –ú–µ—Ç–æ–¥ OpenPricesFolder –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫–ª–∞—Å—Å–∞.
        /// </summary>

        [RelayCommand]
        private void OpenPricesFolder()
        {
            if (!EnsurePricesRoot())
                return;

            try
            {
                var shellPath = GetShellAccessiblePath(PricesRoot, ensureExists: true);

                if (!Directory.Exists(shellPath))
                {
                    ReportError($"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {shellPath}");
                    return;
                }

                var startInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = shellPath,
                    UseShellExecute = true,
                    Verb = "open"
                };
                System.Diagnostics.Process.Start(startInfo);
                if (!string.Equals(shellPath, PricesRoot, StringComparison.OrdinalIgnoreCase))
                {
                    AddLog($"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ {shellPath} (–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {PricesRoot})");
                    UpdateStatus($"–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {shellPath}");
                }
                else
                {
                    AddLog($"üìÅ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ {shellPath}");
                    UpdateStatus($"–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {shellPath}");
                }
            }
            catch (Exception ex)
            {
                ReportError($"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º–∏: {ex.Message}", ex);
            }
        }

        [ObservableProperty] private int selectedMailServerIndex = 1; // Mail.ru
        partial void OnSelectedMailServerIndexChanged(int value)
            => SelectedMailServer = (MailServerType)value;
    }
}
